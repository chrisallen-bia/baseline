<script type="text/javascript">
    (function() {

        let createDashedString = function(str) {
            let dashed = "";
            dashed = str.replace(/&|amp;|&amp;|&#039;|#039;|\/|\(|\)|"|'|â€™|\.|,/gi, "").toLowerCase().trim();
            dashed = dashed.replace(/  /gi, " ");
            dashed = dashed.replace(/ /gi, "-");

            return dashed;
        }

        const sectionHeaders = document.querySelectorAll("article h2:not(.usa-sr-only), article h3:not(.usa-sr-only)");

        if(sectionHeaders && sectionHeaders.length > 1) {

            var tocHtml = "";

            //for (let i = 0; i < sections.length; i++) {
                //let sectionHeaders = sections[i].querySelectorAll('h2:not(.usa-sr-only), h3:not(.usa-sr-only)');
                let lastHeaderType = '';

                for (let j = 0; j < sectionHeaders.length; j++){

                    if(sectionHeaders[j].nodeName == 'H2' && j < sectionHeaders.length) {
                        // If this is the last header type was h3, and we are now in a new h2,
                        // close the old h2 block
                        if(lastHeaderType == 'H3'){
                            tocHtml += `</ul></li>`;
                        }
                        else if(lastHeaderType == 'H2'){
                            tocHtml += `</li>`;
                        }

                        tocHtml +=
                            `<li class="usa-sidenav__item ia-toc-toplevel">
                                <a href="#${sectionHeaders[j].id}">${sectionHeaders[j].innerText}</a>`;


                    }

                    if(sectionHeaders[j].nodeName == 'H3'  && j < sectionHeaders.length) {
                        // If this is the last header type was h2, and we are now in a new h3,
                        // we are now creating a sublist

                        //let header3id = `${sections[i].id}-${createDashedString(sectionHeaders[j].innerText)}`;

                        if(lastHeaderType == 'H2'){
                            tocHtml +=
                                `<ul class="usa-sidenav__sublist">
                                    <li class="usa-sidenav__item">
                                        <a href="#${sectionHeaders[j].id}">${sectionHeaders[j].innerText}</a>
                                    </li>`;
                        }
                        // If we are in an H3 and the last element was an H3, we are still in the same sublist
                        else if(lastHeaderType == 'H3') {
                            tocHtml +=
                                `   <li class="usa-sidenav__item">
                                        <a href="#${sectionHeaders[j].id}">${sectionHeaders[j].innerText}</a>
                                    </li>`;
                        }

                    }

                    //if last and we are in h2...
                    if(j == sectionHeaders.length-1 && sectionHeaders[j].nodeName == 'H2'){
                        tocHtml += `</li>`;
                    }

                    //if last and we are in h3...
                    if(j == sectionHeaders.length-1 && sectionHeaders[j].nodeName == 'H3'){
                        tocHtml += `</ul></li>`;
                    }

                    lastHeaderType = sectionHeaders[j].nodeName;
                }

            //}

            document.getElementById('table-of-contents').innerHTML = tocHtml;

            //If not on a phone
            if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                document.getElementById('toc-container').classList.add('position-sticky', 'top-1');

                // Necessary to get the correct top of each section, offsetTop is not sufficient in and of itself
                const getOffsetTop = element => {
                    let offsetTop = 0;
                    while(element) {
                        offsetTop += element.offsetTop;
                        element = element.offsetParent;
                    }
                    return offsetTop;
                }

                // grab the sections (targets) and menu_links (triggers)
                // for menu items to apply active link styles to
                const menu_links = document.querySelectorAll('#table-of-contents .usa-sidenav__item a');
                //const menu_links = document.querySelectorAll('#table-of-contents .ia-toc-toplevel>a');

                // functions to add and remove the active class from links as appropriate
                const makeActive = (link) => menu_links[link].classList.add("usa-current");
                const removeActive = (link) => menu_links[link].classList.remove("usa-current");
                const removeAllActive = () => [...Array(sectionHeaders.length).keys()].forEach((link) => removeActive(link));
                const sectionMargin = 100;

                console.log([...Array(sectionHeaders.length).keys()]);

                let currentActive = 0;

                // listen for scroll events
                window.addEventListener("scroll", () => {

                    const current = sectionHeaders.length - [...sectionHeaders].reverse().findIndex((sectionHeader) => window.scrollY >= getOffsetTop(sectionHeader) - sectionMargin ) - 1;

                    if (current !== currentActive) {
                        removeAllActive();
                        currentActive = current;
                        makeActive(current);
                    }
                }); // scroll event listener
            } // end if not on a phone
        } // end if sections are more than 1
        else {
            // If not enough sections for ToC, remove the column and make content area full width
            document.getElementById('toc-container').parentElement.previousElementSibling.classList.remove('tablet:grid-col-8');
            document.getElementById('toc-container').parentElement.previousElementSibling.classList.add('tablet:grid-col-12');
            document.getElementById('toc-container').parentElement.remove();
        }
    })();
</script>